#### This file is part of Magik Components for SWAF.
##
##     This library is free software; you can redistribute it and/or
##     modify it under the terms of the GNU Lesser General Public
##     License as published by the Free Software Foundation; either
##     version 2.1 of the License, or (at your option) any later version.
##
##     Magik Components for SWAF is distributed in the hope that it will be useful,
##     but WITHOUT ANY WARRANTY; without even the implied warranty of
##     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
##     Lesser General Public License for more details.
##
##     You should have received a copy of the GNU Lesser General Public
##     License along with this library; if not, write to the Free Software
##     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA 
##
##  Author: Pedro Miranda
##	    e-mail: pmiranda.pt@gmail.com
##
##  Date: 20 Nov 2007
##
##
_pragma(classify_level=basic, topic={NOTOPIC})
##
##
##  Description:
##
##
##  Dependencies:
##
##
##  $Log: TheDotNetAcp.magik,v $
##  Revision 1.1  2008/05/30 14:53:17  bsileo
##  Initial import of this base .NET ACP integration framework
##
##
##
## (C) 2007
##
def_slotted_exemplar(:TheDotNetAcp, {}, {:dotnet_acp})
$

TheDotNetAcp.define_shared_constant(:echo_tests,
				    rope.new_with(
					{:|put_chars()|, "Hello smallWorld! (ASCII version)",:|get_chars()|},
					{:|put_chars16()|,"Hello smallWorld! (Unicode version)",:|get_chars16()|},
					{:|put_signed_byte()|, -2,:|get_signed_byte()|},
					{:|put_unsigned_byte()|,3,:|get_signed_byte()|},
					{:|put_signed_short()|,-5,:|get_signed_short()|},
					{:|put_unsigned_short()|,7,:|get_unsigned_short()|},
					{:|put_signed_int()|,-11,:|get_signed_int()|},
					{:|put_unsigned_int()|,13,:|get_unsigned_int()|},
					{:|put_signed_long()|,-17,:|get_signed_long()|},
					{:|put_unsigned_long()|,19,:|get_unsigned_long()|},
					{:|put_short_float()|,23.29,:|get_short_float()|},
					{:|put_float()|,31.37,:|get_float()|},
					{:|put_boolean()|,_true,:|get_boolean()|},
					{:|put_byte_vector()|,byte_vector.new_with(2,3,5),:|get_byte_vector()|}
					 ),
				    _true)
$


_method TheDotNetAcp.echo()
    ##
    ##
    _local ok? << false
    _protect _locking _self
	     _self.locked_start()
	     write("TheDotNetAcp echo test....")
	     _for test _over _self.echo_tests.fast_elements()
	     _loop
		 write("sending ", test[2]," by ", test[1])
		 _self.perform(test[1],test[2])
		 result<< _self.perform(test[3])
		 write("  received ",result," by ",test[3])
	     _endloop
	     write("echo test ended.")
    _protection
	_self.locked_end(ok?)
    _endprotect
_endmethod
$

# initialise exemplar so it can be used directly.
TheDotNetAcp.init()
$

