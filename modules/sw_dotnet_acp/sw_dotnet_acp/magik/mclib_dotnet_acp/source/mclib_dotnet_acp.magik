_package user
$
#### This file is part of Magik Components for SWAF.
##
##     This library is free software; you can redistribute it and/or
##     modify it under the terms of the GNU Lesser General Public
##     License as published by the Free Software Foundation; either
##     version 2.1 of the License, or (at your option) any later version.
##
##     Magik Components for SWAF is distributed in the hope that it will be useful,
##     but WITHOUT ANY WARRANTY; without even the implied warranty of
##     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
##     Lesser General Public License for more details.
##
##     You should have received a copy of the GNU Lesser General Public
##     License along with this library; if not, write to the Free Software
##     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA 
##
##  Author: Pedro Miranda
##	    e-mail: pmiranda.pt@gmail.com
##
##  Date: 20 Nov 2007
##
##
_pragma(classify_level=basic, topic={NOTOPIC})
##
##
##  Description:
##
##
##  Dependencies:
##
##
##  $Log: mclib_dotnet_acp.magik,v $
##  Revision 1.1  2008/05/30 14:53:27  bsileo
##  Initial import of this base .NET ACP integration framework
##
##
##
## (C) 2007
##
def_slotted_exemplar(:mclib_dotnet_acp, {}, {:user_acp})
$

_method mclib_dotnet_acp.new()
	>> _clone.init()
_endmethod
$

_method mclib_dotnet_acp.select_protocol(number)
	## do nothing - always 0 anyway
_endmethod
$

_method mclib_dotnet_acp.init()
    ##
    ##

    # this will clear out the slots which are set to reflect an
    # active c process. This is necessary since we may be running
    # on the exemplar itself.

    _self.init_copy()

    # We specify the executable command here without an absolute
    # path name.  The executable will therefore have to be located
    # in the user's PATH or SW_ACP_PATH on UNIX, or via a DCL symbol
    # on VMS.

    .command << {"sw_dotnet_acp.exe"}
    .program_ident << "sw_dotnet_acp"

    # First version, so min and max protocols are both zero

	.minimum_protocol << 0
	.maximum_protocol << 0

	>> _self
_endmethod
$


_method mclib_dotnet_acp.put_byte_vector(some_byte_vector)
    ##
    ##
    _return _self.put_counted_vector(some_byte_vector,:unsigned8)
_endmethod
$

_method mclib_dotnet_acp.get_byte_vector()
    ##
    ##
    _return _self.get_counted_vector(byte_vector,:unsigned8)
_endmethod
$

_method mclib_dotnet_acp.put_signed_short_vector(some_signed_short_vector)
    ##
    ##
    _return _self.put_counted_vector(some_signed_short_vector,:signed16)
_endmethod
$

_method mclib_dotnet_acp.get_signed_short_vector()
    ##
    ##
    _return _self.get_counted_vector(signed_short_vector,:signed16)
_endmethod
$

