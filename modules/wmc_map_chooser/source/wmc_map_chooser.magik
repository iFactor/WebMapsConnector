#% text_encoding = iso8859_1
##-----------------------------------------------------------------------------------------------
## Web Maps Connector (which shows web maps as layers in Smallworld(TM) Core Spatial Technology)
## Copyright (C) 2017 KUBRA
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http:##www.gnu.org/licenses/>.
##
## You may contact KUBRA at https://kubra.com/contact-us/
##-----------------------------------------------------------------------------------------------

##
##  Auto-generated by Dialog Designer v2.7
##  on 06/02/2014
##
##  System.user_name = Alfred
##

_package user
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
def_slotted_exemplar(:wmc_map_chooser,
	{
		{:items, _unset, :writable}
	},
	:plugin)
$
_pragma(classify_level=advanced)
## Indicates whether the map chooser canvas should show the
## Opacity slider widget (Default=False) 
wmc_map_chooser.def_property(:enable_opacity_slider?,
			    :type,          :boolean,
			    :default_value, _true,
			    :readable?,     _true,
			    :writable?,     _true,
			    :description,   "Indicates whether the map chooser canvas should show the Opacity slider widget (Default=False)")
$
_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.init_actions()
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014
	##
	##  Initialize actions for SELF.
	##

	#
	# Work Area Actions ...
	#
	_self.add_action( sw_action.new( :large_icons,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:large_icons),
		:engine,                 _self,
		:action_message,         :|large_icons()|,
		:image,                 {:view_large_icons,:control_panel_plugin} ) )

	_self.add_action( sw_action.new( :small_icons,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:small_icons),
		:engine,                 _self,
		:action_message,         :|small_icons()|,
		:image,                 {:view_small_icons,:control_panel_plugin} ) )

	_self.add_action( sw_action.new( :show_map_list,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:show_map_list),
		:engine,                 _self,
		:action_message,         :|show_map_list()|,
		:image,                 {:list,:object_control_plugin} ) )

	_self.add_action( sw_action.new( :clear_selection,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:clear_selection),
		:engine,                 _self,
		:action_message,         :|clear_selection()|,
		:image,                 {:clear,:ui_resources} ) )

	_self.add_action( sw_action.new( :apply_maps,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:apply_maps),
		:engine,                 _self,
		:action_message,         :|apply_maps()|,
		:image,                 {:commit,:version_management_plugin} ) )

	_self.add_action( sw_action.new( :hide_map_chooser,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:hide_map_chooser),
		:engine,                 _self,
		:action_message,         :|hide_map_chooser()|,
		:image,                 {:close_pane,:ui_resources} ) )

	#
	# Menubar Actions ...
	#
	_self.add_action( sw_action.new( :quit,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|quit()| ) )

	_self.add_action( sw_action.new( :about,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|about()| ) )
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.build_gui(a_frame,_optional xml_element)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014
	##
	##  Define the GUI layout.
	##

	.items << property_list.new()

	rowcol_01 << rowcol.new(a_frame,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Web Map",
		:bottom_spacing,	0,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row_resize_values,	{0,100,0},
		:row_spacing,	0,
		:top_spacing,	5)

	_self.build_map_or_wms(rowcol_01)

	_self.custom_build_gui()

	>> rowcol_01
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.build_map_or_wms(rowcol_01)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	.items[:map_or_wms] << window_stack.new(rowcol_01,:resize?,_true,:row,1,:col,1,:value,:map_chooser,
		:col_alignment,:fill,:row_alignment,:fill)
	map_or_wms << .items[:map_or_wms]

	_self.build_rowcol_07(map_or_wms)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.build_rowcol_07(map_or_wms)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	rowcol_07 << rowcol.new(map_or_wms,2,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Web Map",
		:bottom_spacing,	0,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row_spacing,	2,
		:top_spacing,	0,
		:name,	:|map_chooser|)

	_self.build_rowcol_04(rowcol_07)

	.items[:ws] << window_stack.new(rowcol_07,:resize?,_true,:row,2,:col,1,:value,:canvas,
		:col_alignment,:fill,:row_alignment,:fill)
	ws << .items[:ws]

	rowcol_11 << rowcol.new(ws,2,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row_resize_values,	{100,0,0},
		:row_spacing,	6,
		:top_spacing,	0,
		:name,	:|canvas|)

	rowcol_03 << rowcol.new(ws,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row_spacing,	6,
		:top_spacing,	0,
		:name,	:|list|)

	rowcol_02 << rowcol.new(rowcol_11,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	legends_rc << rowcol.new(rowcol_11,2,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	2,
		:row_spacing,	6,
		:top_spacing,	0)

	a << canvas_agent.new(_unset)
	.items[:canvas] << scrollable_canvas.new(rowcol_02,unset,100,a,
		:col,	1,
		:col_alignment,	:fill,
		:has_vertical_scrollbar?,	_false,
		:height,	100,
		:row,	1,
		:row_alignment,	:fill,
		:width,	300 )

#  Example canvas agent action definitions:
#       a.define_redraw( :|refresh_view()|,_self)
#       a.define_button_press( :|button_pressed()|,_self,:select)
#       a.define_button( :|button_released()|,_self,:select)
#       a.define_locator( :|changed_mouse_position()|,_self,:move)
#       a.define_locator( :|dragged_mouse_position()|,_self,:drag)
#       a.define_key({:|some_method()|,first_arg,second_arg},_self,%space)
#       a.define_hit({:|hit_method()|,first_arg,second_arg},_self)

	rowcol_06 << rowcol.new(legends_rc,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	a << canvas_agent.new(_unset)
	.items[:legend_canvas] << scrollable_canvas.new(legends_rc,unset,80,a,
		:col,	1,
		:col_alignment,	:fill,
		:has_vertical_scrollbar?,	_false,
		:height,	80,
		:row,	2,
		:row_alignment,	:fill,
		:width,	40 )

#  Example canvas agent action definitions:
#       a.define_redraw( :|refresh_view()|,_self)
#       a.define_button_press( :|button_pressed()|,_self,:select)
#       a.define_button( :|button_released()|,_self,:select)
#       a.define_locator( :|changed_mouse_position()|,_self,:move)
#       a.define_locator( :|dragged_mouse_position()|,_self,:drag)
#       a.define_key({:|some_method()|,first_arg,second_arg},_self,%space)
#       a.define_hit({:|hit_method()|,first_arg,second_arg},_self)

	.items[:legend_label] << label_item.new(rowcol_06,"Legends",
			:col,	1,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:value,	"Legends" )

	.items[:map_list] << tree_item.new(rowcol_03,
		:model,	_self,
		:allow_filtering?,	_true,
		:aspect,	:|map_list_aspect|,
		:col,	1,
		:col_alignment,	:fill,
		:column_alignments,	{:left,:left,:left},
		:column_allow_groupby?,	_false,
		:column_headings,	{"On?","Source","Map"},
		:column_widths,	{30,70,300},
		:double_click_notifier,	:|map_list_double_clicked()|,
		:grid_lines?,	_false,
		:height,	80,
		:mode,	:one,
		:row,	1,
		:row_alignment,	:fill,
		:width,	160 )
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.build_rowcol_04(rowcol_07)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_global sw:g_opacity_scale
	
	rowcol_04 << rowcol.new(rowcol_07,1,10,:pixel,
		:resize?,	_true,
		:tab_label,	"Web Map",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	0,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	_self.action(:large_icons).place_control_on(rowcol_04,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	1,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|large_icons()| } )
	_self.action(:small_icons).place_control_on(rowcol_04,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	2,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|small_icons()| } )
	_self.action(:show_map_list).place_control_on(rowcol_04,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	3,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|show_map_list()| } )
	.items[:panel_separator_01] << panel_separator.new(rowcol_04,
			:col,	4,
			:col_alignment,	:fill,
			:min_height,	10,
			:min_width,	4,
			:row,	1,
			:row_alignment,	:fill,
			:vertical?,	_true )

	_self.action(:clear_selection).place_control_on(rowcol_04,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	5,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|clear_selection()| } )
	.items[:panel_separator_02] << panel_separator.new(rowcol_04,
			:col,	6,
			:col_alignment,	:fill,
			:min_height,	10,
			:min_width,	4,
			:row,	1,
			:row_alignment,	:fill,
			:vertical?,	_true )

	_self.action(:apply_maps).place_control_on(rowcol_04,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	7,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|apply_maps()| } )
	.items[:panel_separator_03] << panel_separator.new(rowcol_04,
			:col,	8,
			:col_alignment,	:fill,
			:min_height,	10,
			:min_width,	4,
			:row,	1,
			:row_alignment,	:fill,
			:vertical?,	_true )


	sw:g_opacity_scale << 100
	_if _self.enable_opacity_slider?
	_then
		sw:g_opacity_scale << _self.application.ace.get_user_data(:wmc_opacity_scale).default(sw:g_opacity_scale)
		# Change Active Layers' Opacity
		.items[:opacity_slider] << slider_item.new(rowcol_04,"",0,100,
							   :change_selector,	:|change_opacity()|,
							   :col,	9,
							   :col_alignment,	:fill,
							   :enabled?,	_true,
							   :row,	1,
							   :row_alignment,	:top,
							   :value,	sw:g_opacity_scale,
							   :balloon_help_text, "Change Active Layers' Opacity",
							   :model,  _self )
	_endif


	rowcol_05 << rowcol.new(rowcol_04,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Web Map",
		:bottom_spacing,	0,
		:col,	10,
		:col_spacing,	0,
		:col_alignment,	:right,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	_self.action(:hide_map_chooser).place_control_on(rowcol_05,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	1,
			:col_alignment,	:right,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|hide_map_chooser()| } )_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.quit()
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014
	##
	##  Close the dialog.
	##
	.framework.close()
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.apply_maps(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_self.dd_default_method("wmc_map_chooser.apply_maps()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.change_opacity(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_self.dd_default_method("wmc_map_chooser.change_opacity()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.clear_selection(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_self.dd_default_method("wmc_map_chooser.clear_selection()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.dd_default_method(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014
	##
	##  General default method writing CLASS.METHOD and passed ARGS to
	##  the Magik> prompt.

	msg << write_string("Auto-generated : ",args[1],%newline)

	_if args.size > 1
	_then
		msg +<< write_string(%newline,args.size-1," parameter(s) passed:")
 	_endif

	_for i _over 2.upto(args.size)
	_loop
		msg +<< write_string(%newline,"         ",args[i])
	_endloop

	write(%newline,"-"*80,%newline,msg)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.hide_map_chooser(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_self.dd_default_method("wmc_map_chooser.hide_map_chooser()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.large_icons(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_self.dd_default_method("wmc_map_chooser.large_icons()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.map_list_aspect
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014
	##
	##  SAMPLE tabular list code ...

	tab_list << rope.new()

	# Generate 10 rows of random data
	r26 << random.new(26)
	r4 << random.new(4)
	alpha << "abcdefghijklmnopqrstuvwxyz"

	_for i _over 1.upto(10)
	_loop
		vals << {}.new(3)

		# For each row, generate a random string for each column
		_for c _over 1.upto(3)
		_loop
			str << ""
			_for j _over 1.upto(r4.get()+1)
			_loop
				str +<< alpha[r26.get()+1]
			_endloop

			vals[c] << str
		_endloop

		# Set the row of data for the table
		ds << display_tree.new(i,vals)

		# Specify how the data will be displayed
		ds.styled_string << {:value,1,:tab,:value,2,:tab,:value,3}

		# Add the row to the list
		tab_list.add_last(ds)
	_endloop

	>> tab_list
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.map_list_double_clicked(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_self.dd_default_method("wmc_map_chooser.map_list_double_clicked()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.show_map_list(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_self.dd_default_method("wmc_map_chooser.show_map_list()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.small_icons(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.7 : 06/02/2014

	_self.dd_default_method("wmc_map_chooser.small_icons()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
wmc_map_chooser.define_shared_constant(
	:databus_producer_data_types,
	{:wmc_map},
	:private)
$

_pragma(classify_level=restricted, topic={wmc_map_chooser})
_method wmc_map_chooser.sw_databus_data_requested(type)
	write("'wmc_map_chooser' data requested : ",type)
_endmethod
$
