#% text_encoding = iso8859_1
##-----------------------------------------------------------------------------------------------
## Web Maps Connector (which shows web maps as layers in Smallworld(TM) Core Spatial Technology)
## Copyright (C) 2017 KUBRA
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http:##www.gnu.org/licenses/>.
##
## You may contact KUBRA at https://kubra.com/contact-us/
##-----------------------------------------------------------------------------------------------

##
##  Auto-generated by Dialog Designer ( 21/01/2009 )
##
##  System.user_mame = Alfred
##

_package user
$

_pragma(classify_level=restricted, topic={ve_som_about_dialog})
def_slotted_exemplar(:ve_som_about_dialog,
	{
		{:items, _unset, :writable}
	},
	:plugin)
$

_pragma(classify_level=restricted, topic={ve_som_about_dialog})
_method ve_som_about_dialog.init_actions()
	##
	##  Auto-generated by Dialog Designer : 21/01/2009
	##
	##  Initialize actions for SELF.
	##

	#
	# Work Area Actions ...
	#
	_self.add_action( sw_action.new( :ifactor_consulting,
		:toolbar_control,        :button_item,
		:caption,                _self.message(:ifactor_consulting),
		:engine,                 _self,
		:action_message,         {:|launch_web_browser()|,_self.message(:ifactor_consulting_url)} ))

	_self.add_action( sw_action.new( :terms_of_use,
		:toolbar_control,        :button_item,
		:engine,                 _self,
		:action_message,         {:|launch_web_browser()|,_self.message(:terms_of_use_url)} ))

	_self.add_action( sw_action.new( :privacy_policy,
		:toolbar_control,        :button_item,
		:caption,                _self.message(:privacy_policy),
		:engine,                 _self,
		:action_message,         {:|launch_web_browser()|,_self.message(:privacy_policy_url)} ))

	_self.add_action( sw_action.new( :check_updates,
		:toolbar_control,        :button_item,
		:caption,                _self.message(:check_updates),
		:engine,                 _self,
		:action_message,         :|check_for_updates()|))

	_self.add_action( sw_action.new( :send_support_email,
		:toolbar_control,        :button_item,
		:caption,                _self.message(:send_support_email),
		:engine,                 _self,
		:action_message,         :|send_support_email()|))

	_self.add_action( sw_action.new( :goto_support_page,
		:toolbar_control,        :button_item,
		:caption,                _self.message(:goto_support_page),
		:engine,                 _self,
		:action_message,         {:|launch_web_browser()|,_self.message(:goto_support_page_url)}))

	#
	# Menubar Actions ...
	#
	_self.add_action( sw_action.new( :quit,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|quit()| ) )

	_self.add_action( sw_action.new( :about,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|about()| ) )
_endmethod
$

_pragma(classify_level=restricted, topic={ve_som_about_dialog})
_method ve_som_about_dialog.build_gui(a_frame,_optional xml_element)
	##
	##  Auto-generated by Dialog Designer : 21/01/2009
	##
	##  Define the GUI layout.
	##

	.items << property_list.new()

	rowcol_01 << rowcol.new(a_frame,7,1,:pixel,
		:resize?,	_true,
		:tab_label,	_self.message(:title),
		:bottom_spacing,	6,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	6,
		:right_spacing,	6,
		:row_spacing,	6,
		:top_spacing,	6)

	.items[:label_item_01] << label_item.new(rowcol_01,_self.message(:label_item_01),
			:col,	1,
			:col_alignment,	:fill,
			:row,	1,
			:row_alignment,	:top,
			:value,	_self.message(:label_item_01) )
	
	rowcol_03 << rowcol.new(rowcol_01,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	_self.message(:title),
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	2,
		:row_spacing,	6,
		:top_spacing,	0)

	_self.action(:ifactor_consulting).place_control_on(rowcol_03,:dialog,
		:control_type, { :button_item,
			:col,	1,
			:col_alignment,	:left,
			:label,	_self.message(:ifactor_consulting),
			:min_width,	60,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|launch_ifactor_consulting()| } )

	_local check_for_updates_rowcol << rowcol.new(rowcol_01,3,1,:pixel,
						      :resize?,	_true,
						      :bottom_spacing,	0,
						      :col,	1,
						      :col_spacing,	7,
						      :col_alignment,	:fill,
						      :row_alignment,	:fill,
						      :left_spacing,	0,
						      :right_spacing,	0,
						      :row,	3,
						      :row_spacing,	6,
						      :top_spacing,	0)
	
	.items[:check_for_updates_label] << label_item.new(check_for_updates_rowcol,_self.message(:check_for_updates_label,_self.get_product_revision_number()),
							   :col,	1,
							   :col_alignment,	:fill,
							   :row,	1,
							   :row_alignment,	:top)
	
	_self.action(:check_updates).place_control_on(check_for_updates_rowcol,:dialog,
						      :control_type, { :button_item,
								       :col,	1,
								       :col_alignment,	:left,
								       :label,	_self.message(:check_updates),
								       :min_width,	60,
								       :row,	2,
								       :row_alignment,	:top,
								       :selector,	:|check_for_updates()| } )
	

	label_item.new(check_for_updates_rowcol,_self.message(:support_info),
		       :col,1,:row,3)

	_local support_buttons_rowcol << rowcol.new(rowcol_01,1,2,:pixel,
						    :resize?,	_true,
						    :tab_label,	_self.message(:title),
						    :bottom_spacing,	0,
						    :col,	1,
						    :col_spacing,	7,
						    :col_alignment,	:fill,
						    :row_alignment,	:fill,
						    :left_spacing,	0,
						    :right_spacing,	0,
						    :row,	        4,
						    :row_spacing,	6,
						    :top_spacing,	0)

	_self.action(:send_support_email).place_control_on(support_buttons_rowcol,:dialog,
							   :control_type, { :button_item,
									    :col,	1,
									    :col_alignment,	:left,
									    :label,	_self.message(:send_support_email),
									    :min_width,	60,
									    :row,	1,
									    :row_alignment,	:top,
									    :selector,	:|send_support_email()| } )

	_self.action(:goto_support_page).place_control_on(support_buttons_rowcol,:dialog,
							  :control_type, { :button_item,
									   :col,	2,
									   :col_alignment,	:left,
									   :label,	_self.message(:goto_support_page),
									   :min_width,	60,
									   :row,	1,
									   :row_alignment,	:top,
									   :selector,	:|goto_support_page()| } )

	
	
	
	.items[:label_item_02] << label_item.new(rowcol_01," ",
			:col,	1,
			:col_alignment,	:fill,
			:row,	5,
			:row_alignment,	:top,
			:value,	" " )

	.items[:label] << label_item.new(rowcol_01,_self.message(:label),
			:col,	1,
			:col_alignment,	:fill,
			:row,	6,
			:row_alignment,	:top,
			:value,	_self.message(:label) )

	rowcol_02 << rowcol.new(rowcol_01,1,2,:pixel,
		:resize?,	_true,
		:tab_label,	_self.message(:title),
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	7,
		:row_spacing,	6,
		:top_spacing,	0)

	_self.action(:terms_of_use).place_control_on(rowcol_02,:dialog,
		:control_type, { :button_item,
			:col,	1,
			:col_alignment,	:left,
			:label,	_self.message(:terms_of_use),
			:min_width,	60,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|launch_terms_of_use()| } )

	_self.action(:privacy_policy).place_control_on(rowcol_02,:dialog,
		:control_type, { :button_item,
			:col,	2,
			:col_alignment,	:left,
			:label,	_self.message(:privacy_policy),
			:min_width,	60,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|launch_privacy_policy()| } )

	>> rowcol_01
_endmethod
$

_pragma(classify_level=restricted, topic={ve_som_about_dialog})
_method ve_som_about_dialog.quit()
	##
	##  Auto-generated by Dialog Designer : 21/01/2009
	##
	##  Close the dialog.
	##
	.framework.close()
_endmethod
$

_pragma(classify_level=restricted, topic={ve_som_about_dialog})
_method ve_som_about_dialog.launch_web_browser(url)

	system.do_command(write_string("start ",url))
_endmethod
$
_pragma(classify_level=restricted, topic={ve_som_about_dialog})
_method ve_som_about_dialog.send_support_email()

	system.do_command(write_string("start ","mailto:support@ifactor.zendesk.com?subject=WMC%20Revision%20",_self.get_product_revision_number()))
_endmethod
$

_pragma(classify_level=restricted, topic={ve_som_about_dialog})
_private _method ve_som_about_dialog.int!ve_swaf_plugin
	## int!ve_swaf_plug : ve_swaf_plugin
	##
	## returns the ve_swaf_plugin associated with the current
	## application. 

	_local ve_plugin << _unset
	
	_for a_pi _over _self.application.plugins()
	_loop
		_if a_pi.is_kind_of?(ve_swaf_plugin)
		_then
			ve_plugin << a_pi
			_leave 
		_endif
	_endloop

	_return ve_plugin

_endmethod
$
_pragma(classify_level=restricted, topic={ve_som_about_dialog})
_method ve_som_about_dialog.check_for_updates()
	## check_for_updates() : _unset
	##
	## calls :check_for_updates() on ve_swaf_plugin


	_self.int!ve_swaf_plugin.check_for_updates()
_endmethod
$
_pragma(classify_level=restricted, topic={ve_som_about_dialog})
_method ve_som_about_dialog.get_product_revision_number()
	## get_product_revision_number() : string
	##
	## returns the revision number of the current product. 


	_return _self.int!ve_swaf_plugin.get_product_revision_number().split_by(space_char).first
_endmethod
$
