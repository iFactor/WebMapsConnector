#% text_encoding = iso8859_1
##-----------------------------------------------------------------------------------------------
## Web Maps Connector (which shows web maps as layers in Smallworld(TM) Core Spatial Technology)
## Copyright (C) 2017 KUBRA
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http:##www.gnu.org/licenses/>.
##
## You may contact KUBRA at https://kubra.com/contact-us/
##-----------------------------------------------------------------------------------------------

##
##  Auto-generated by Dialog Designer v2.6
##  on 19/04/2012
##
##  System.user_name = Alfred
##

_package user
$

_pragma(classify_level=restricted, topic={google_streetview})
def_slotted_exemplar(:google_streetview,
	{
		{:items, _unset, :writable}
	},
	:plugin)
$

_pragma(classify_level=restricted, topic={google_streetview})
_method google_streetview.init_actions()
	##
	##  Auto-generated by Dialog Designer v2.6 : 19/04/2012
	##
	##  Initialize actions for SELF.
	##

	#
	# Work Area Actions ...
	#
	_self.add_action( sw_action.new( :get_streetview,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:get_streetview),
		:engine,                 _self,
		:action_message,         :|get_streetview()|,
		:tooltip,                "Get StreetView with current trail",		:image,                 {:add_trail_to_area,_self.module_name} ) )

	_self.add_action( sw_action.new( :zoom_in,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:zoom_in),
		:engine,                 _self,
		:action_message,         :|zoom_in()|,
		:tooltip,                "Zoom In",		:image,                 {:zoom_in,_self.module_name} ) )

	_self.add_action( sw_action.new( :zoom_out,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:zoom_out),
		:engine,                 _self,
		:action_message,         :|zoom_out()|,
		:tooltip,                "Zoom Out",		:image,                 {:zoom_out,_self.module_name} ) )

	#
	# Menubar Actions ...
	#
	_self.add_action( sw_action.new( :quit,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|quit()| ) )

	_self.add_action( sw_action.new( :about,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|about()| ) )
_endmethod
$

_pragma(classify_level=restricted, topic={google_streetview})
_method google_streetview.build_gui(a_frame,_optional xml_element)
	##
	##  Auto-generated by Dialog Designer v2.6 : 19/04/2012
	##
	##  Define the GUI layout.
	##

	.items << property_list.new()

	rowcol_01 << rowcol.new(a_frame,2,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Google Street View",
		:bottom_spacing,	6,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	6,
		:right_spacing,	6,
		:row_spacing,	6,
		:top_spacing,	6)

	rowcol_02 << rowcol.new(rowcol_01,1,3,:pixel,
		:resize?,	_true,
		:tab_label,	"Google Street View",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	# Get StreetView with current trail
	_self.action(:get_streetview).place_control_on(rowcol_02,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	1,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|get_streetview()| } )
	# Zoom In
	_self.action(:zoom_in).place_control_on(rowcol_02,:dialog,
		:control_type, { :image_button_item,
			:col,	2,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|zoom_in()| } )
	# Zoom Out
	_self.action(:zoom_out).place_control_on(rowcol_02,:dialog,
		:control_type, { :image_button_item,
			:col,	3,
			:col_alignment,	:left,
			:enabled?,	_true,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|zoom_out()| } )
	a << canvas_agent.new(_unset)
	.items[:scrollable_canvas_01] << scrollable_canvas.new(rowcol_01,unset,40,a,
		:col,	1,
		:col_alignment,	:fill,
		:has_vertical_scrollbar?,	_false,
		:height,	40,
		:row,	2,
		:row_alignment,	:fill,
		:width,	40 )

#  Example canvas agent action definitions:
#       a.define_redraw( :|refresh_view()|,_self)
#       a.define_button_press( :|button_pressed()|,_self,:select)
#       a.define_button( :|button_released()|,_self,:select)
#       a.define_locator( :|changed_mouse_position()|,_self,:move)
#       a.define_locator( :|dragged_mouse_position()|,_self,:drag)
#       a.define_key({:|some_method()|,first_arg,second_arg},_self,%space)
#       a.define_hit({:|hit_method()|,first_arg,second_arg},_self)

	_self.custom_build_gui()

	>> rowcol_01
_endmethod
$

_pragma(classify_level=restricted, topic={google_streetview})
_method google_streetview.quit()
	##
	##  Auto-generated by Dialog Designer v2.6 : 19/04/2012
	##
	##  Close the dialog.
	##
	.framework.close()
_endmethod
$

_pragma(classify_level=restricted, topic={google_streetview})
_method google_streetview.about(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.6 : 19/04/2012

	_self.dd_default_method("google_streetview.about()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={google_streetview})
_method google_streetview.dd_default_method(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.6 : 19/04/2012
	##
	##  General default method writing CLASS.METHOD and passed ARGS to
	##  the Magik> prompt.

	msg << write_string("Auto-generated : ",args[1],%newline)

	_if args.size > 1
	_then
		msg +<< write_string(%newline,args.size-1," parameter(s) passed:")
 	_endif

	_for i _over 2.upto(args.size)
	_loop
		msg +<< write_string(%newline,"         ",args[i])
	_endloop

	write(%newline,"-"*80,%newline,msg)
_endmethod
$

_pragma(classify_level=restricted, topic={google_streetview})
_method google_streetview.get_streetview(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.6 : 19/04/2012

	_self.dd_default_method("google_streetview.get_streetview()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={google_streetview})
_method google_streetview.zoom_in(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.6 : 19/04/2012

	_self.dd_default_method("google_streetview.zoom_in()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={google_streetview})
_method google_streetview.zoom_out(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.6 : 19/04/2012

	_self.dd_default_method("google_streetview.zoom_out()",_scatter args)
_endmethod
$
