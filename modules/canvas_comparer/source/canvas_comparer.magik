#% text_encoding = iso8859_1
##-----------------------------------------------------------------------------------------------
## Web Maps Connector (which shows web maps as layers in Smallworld(TM) Core Spatial Technology)
## Copyright (C) 2017 KUBRA
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http:##www.gnu.org/licenses/>.
##
## You may contact KUBRA at https://kubra.com/contact-us/
##-----------------------------------------------------------------------------------------------

##
##  Auto-generated by Dialog Designer v2.2
##  on 17/03/2011
##
##  System.user_mame = Alfred
##

_package user
$

_pragma(classify_level=restricted, topic={canvas_comparer})
def_slotted_exemplar(:canvas_comparer,
	{
		{:items, _unset, :writable}
	},
	:plugin)
$

_pragma(classify_level=restricted, topic={canvas_comparer})
_method canvas_comparer.init_actions()
	##
	##  Auto-generated by Dialog Designer v2.2 : 17/03/2011
	##
	##  Initialize actions for SELF.
	##

	#
	# Work Area Actions ...
	#
	_self.add_action( sw_action.new( :image_toggle_item_01,
		:toolbar_control,        :image_toggle_item,
		:menubar_control,        :toggle_item,
		:caption,                _self.message(:image_toggle_item_01),
		:engine,                 _self,
		:value_change_message,   :|image_toggle_item_01()|,
		:image,                  {:snapshot,_self.module_name} ) )

	_self.add_action( sw_action.new( :image_toggle_item_02,
		:toolbar_control,        :image_toggle_item,
		:menubar_control,        :toggle_item,
		:caption,                _self.message(:image_toggle_item_02),
		:engine,                 _self,
		:value_change_message,   :|image_toggle_item_02()|,
		:image,                  {:snapshot,_self.module_name} ) )

	_self.add_action( sw_action.new( :image_toggle_item_03,
		:toolbar_control,        :image_toggle_item,
		:menubar_control,        :toggle_item,
		:caption,                _self.message(:image_toggle_item_03),
		:engine,                 _self,
		:value_change_message,   :|image_toggle_item_03()|,
		:image,                  {:snapshot,_self.module_name} ) )

	_self.add_action( sw_action.new( :image_toggle_item_04,
		:toolbar_control,        :image_toggle_item,
		:menubar_control,        :toggle_item,
		:caption,                _self.message(:image_toggle_item_04),
		:engine,                 _self,
		:value_change_message,   :|image_toggle_item_04()|,
		:image,                  {:snapshot,_self.module_name} ) )

	#
	# Menubar Actions ...
	#
	_self.add_action( sw_action.new( :quit,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|quit()| ) )

	_self.add_action( sw_action.new( :about,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|about()| ) )
_endmethod
$

_pragma(classify_level=restricted, topic={canvas_comparer})
_method canvas_comparer.build_gui(a_frame,_optional xml_element)
	##
	##  Auto-generated by Dialog Designer v2.2 : 17/03/2011
	##
	##  Define the GUI layout.
	##

	.items << property_list.new()

	rowcol_01 << rowcol.new(a_frame,2,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Canvas Comparer",
		:bottom_spacing,	6,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	6,
		:right_spacing,	6,
		:row_spacing,	6,
		:top_spacing,	6)

	rowcol_02 << rowcol.new(rowcol_01,2,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Canvas Comparer",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_03 << rowcol.new(rowcol_02,1,2,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_04 << rowcol.new(rowcol_02,1,2,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	2,
		:row_spacing,	6,
		:top_spacing,	0)

	_self.action(:image_toggle_item_01).place_control_on(rowcol_03,:dialog,
		:has_border?, _false,
		:control_type, { :image_toggle_item,
			:change_selector,	:|image_toggle_item_01()|,
			:col,	1,
			:col_alignment,	:left,
			:row,	1,
			:row_alignment,	:top } )

	_self.action(:image_toggle_item_02).place_control_on(rowcol_03,:dialog,
		:has_border?, _false,
		:control_type, { :image_toggle_item,
			:change_selector,	:|image_toggle_item_02()|,
			:col,	2,
			:col_alignment,	:left,
			:row,	1,
			:row_alignment,	:top } )

	_self.action(:image_toggle_item_03).place_control_on(rowcol_04,:dialog,
		:has_border?, _false,
		:control_type, { :image_toggle_item,
			:change_selector,	:|image_toggle_item_03()|,
			:col,	1,
			:col_alignment,	:left,
			:row,	1,
			:row_alignment,	:top } )

	_self.action(:image_toggle_item_04).place_control_on(rowcol_04,:dialog,
		:has_border?, _false,
		:control_type, { :image_toggle_item,
			:change_selector,	:|image_toggle_item_04()|,
			:col,	2,
			:col_alignment,	:left,
			:row,	1,
			:row_alignment,	:top } )

	a << canvas_agent.new(_unset)
	.items[:scrollable_canvas_01] << scrollable_canvas.new(rowcol_01,unset,500,a,
		:col,	1,
		:col_alignment,	:fill,
		:has_vertical_scrollbar?,	_false,
		:height,	500,
		:row,	2,
		:row_alignment,	:fill,
		:width,	500 )

#  Example canvas agent action definitions:
#       a.define_redraw( :|refresh_view()|,_self)
#       a.define_button_press( :|button_pressed()|,_self,:select)
#       a.define_button( :|button_released()|,_self,:select)
#       a.define_locator( :|changed_mouse_position()|,_self,:move)
#       a.define_locator( :|dragged_mouse_position()|,_self,:drag)
#       a.define_key({:|some_method()|,first_arg,second_arg},_self,%space)
#       a.define_hit({:|hit_method()|,first_arg,second_arg},_self)

	>> rowcol_01
_endmethod
$

_pragma(classify_level=restricted, topic={canvas_comparer})
_method canvas_comparer.quit()
	##
	##  Auto-generated by Dialog Designer v2.2 : 17/03/2011
	##
	##  Close the dialog.
	##
	.framework.close()
_endmethod
$

_pragma(classify_level=restricted, topic={canvas_comparer})
_method canvas_comparer.dd_default_method(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.2 : 17/03/2011
	##
	##  General default method writing CLASS.METHOD and passed ARGS to
	##  the Magik> prompt.

	msg << write_string("Auto-generated : ",args[1],%newline)

	_if args.size > 1
	_then
		msg +<< write_string(%newline,args.size-1," parameter(s) passed:")
 	_endif

	_for i _over 2.upto(args.size)
	_loop
		msg +<< write_string(%newline,"         ",args[i])
	_endloop

	write(%newline,"-"*80,%newline,msg)
_endmethod
$

_pragma(classify_level=restricted, topic={canvas_comparer})
_method canvas_comparer.image_toggle_item_01(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.2 : 17/03/2011

	_self.dd_default_method("canvas_comparer.image_toggle_item_01()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={canvas_comparer})
_method canvas_comparer.image_toggle_item_02(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.2 : 17/03/2011

	_self.dd_default_method("canvas_comparer.image_toggle_item_02()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={canvas_comparer})
_method canvas_comparer.image_toggle_item_03(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.2 : 17/03/2011

	_self.dd_default_method("canvas_comparer.image_toggle_item_03()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={canvas_comparer})
_method canvas_comparer.image_toggle_item_04(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.2 : 17/03/2011

	_self.dd_default_method("canvas_comparer.image_toggle_item_04()",_scatter args)
_endmethod
$
