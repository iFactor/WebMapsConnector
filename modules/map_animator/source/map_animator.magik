#% text_encoding = iso8859_1
##-----------------------------------------------------------------------------------------------
## Web Maps Connector (which shows web maps as layers in Smallworld(TM) Core Spatial Technology)
## Copyright (C) 2017 KUBRA
##
## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http:##www.gnu.org/licenses/>.
##
## You may contact KUBRA at https://kubra.com/contact-us/
##-----------------------------------------------------------------------------------------------

##
##  Auto-generated by Dialog Designer v2.1
##  on 27/08/2010
##
##  System.user_mame = Alfred
##

_package user
$

_pragma(classify_level=restricted, topic={map_animator})
def_slotted_exemplar(:map_animator,
	{
		{:items, _unset, :writable}
	},
	:plugin)
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.init_actions()
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010
	##
	##  Initialize actions for SELF.
	##

	#
	# Work Area Actions ...
	#
	_self.add_action( sw_action.new( :play_image_button_item,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:play_image_button_item),
		:engine,                 _self,
		:action_message,         :|play_image_button_item_selected()|,
		:tooltip,                "Play",
		:image,                 {:run,:map_animator} ) )

	_self.add_action( sw_action.new( :pause_image_button_item,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:pause_image_button_item),
		:engine,                 _self,
		:action_message,         :|pause_image_button_item_selected()|,
		:tooltip,                "Pause",
		:image,                 {:pause,:map_animator} ) )

	_self.add_action( sw_action.new( :reset_button_item,
		:toolbar_control,        :image_button_item,
		:menubar_control,        :button_item,
		:caption,                _self.message(:reset_button_item),
		:engine,                 _self,
		:action_message,         :|reset_button_item_selected()|,
		:tooltip,                "Reset Frames",
		:image,                 {:refresh,:map_animator} ) )

	#
	# Menubar Actions ...
	#
	_self.add_action( sw_action.new( :quit,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|quit()| ) )

	_self.add_action( sw_action.new( :about,
		:menubar_control,        :button_item,
		:engine,                 _self,
		:action_message,         :|about()| ) )
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.build_gui(a_frame,_optional xml_element)
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010
	##
	##  Define the GUI layout.
	##

	.items << property_list.new()

	rowcol_01 << rowcol.new(a_frame,3,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Map Animator",
		:bottom_spacing,	6,
		:col_spacing,	7,
		:default_col_alignment,	:fill,
		:default_row_alignment,	:fill,
		:left_spacing,	6,
		:right_spacing,	6,
		:row_spacing,	6,
		:top_spacing,	6)

	.items[:slider_item] << slider_item.new(rowcol_01,"",-6,0,
		:change_selector,	:|slider_item_changed()|,
		:col,	1,
		:col_alignment,	:fill,
		:row,	1,
		:row_alignment,	:top,
		:value,	0,
		:model,  _self )

	rowcol_02 << rowcol.new(rowcol_01,3,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Map Animator",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:left,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	2,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_04 << rowcol.new(rowcol_02,1,2,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_07 << rowcol.new(rowcol_02,1,2,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	2,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_10 << rowcol.new(rowcol_02,1,2,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	3,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_03 << rowcol.new(rowcol_04,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_05 << rowcol.new(rowcol_04,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	2,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	.items[:label_item_01] << label_item.new(rowcol_03,"Speed:",
			:col,	1,
			:col_alignment,	:fill,
			:row,	1,
			:row_alignment,	:top,
			:value,	"Speed:" )

	.items[:delay_text_choice_item] << text_choice_item.new(rowcol_05,"",
			:model,   _self,
			:col,	1,
			:col_alignment,	:fill,
			:row,	1,
			:row_alignment,	:top,
			:items,	{{:|0|,"Faster"},{:|250|,"Normal"},{:|500|,"Slower"}},
			:balloon_help_text, "Select how fast you want the frames to draw" )

	rowcol_08 << rowcol.new(rowcol_07,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_09 << rowcol.new(rowcol_07,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	2,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	.items[:label_item_02] << label_item.new(rowcol_08,"Interval:",
			:col,	1,
			:col_alignment,	:fill,
			:row,	1,
			:row_alignment,	:top,
			:value,	"Interval:" )

	.items[:interval_text_choice_item] << text_choice_item.new(rowcol_09,"",
			:model,   _self,
			:change_selector,	:|interval_text_choice_item_selected()|,
			:col,	1,
			:col_alignment,	:fill,
			:row,	1,
			:row_alignment,	:top,
			:items,	{{:|1|,"5 minutes"},{:|2|,"10 minutes"},{:|3|,"15 minutes"},{:|6|,"30 minutes"},{:|12|,"1 hour"}} )

	rowcol_11 << rowcol.new(rowcol_10,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	rowcol_12 << rowcol.new(rowcol_10,1,1,:pixel,
		:resize?,	_true,
		:tab_label,	"Tab",
		:bottom_spacing,	0,
		:col,	2,
		:col_spacing,	7,
		:col_alignment,	:fill,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	1,
		:row_spacing,	6,
		:top_spacing,	0)

	.items[:label_item_03] << label_item.new(rowcol_11,"Frames:",
			:col,	1,
			:col_alignment,	:fill,
			:row,	1,
			:row_alignment,	:top,
			:value,	"Frames:" )

	.items[:frames_text_choice_item] << text_choice_item.new(rowcol_12,"",
			:model,   _self,
			:change_selector,	:|frames_text_choice_item_selected()|,
			:col,	1,
			:col_alignment,	:fill,
			:row,	1,
			:row_alignment,	:top,
			:items,	{{:|2|,"2"},{:|4|,"4"},{:|6|,"6"},{:|10|,"10"},{:|15|,"15"},{:|20|,"20"},{:|25|,"25"},{:|30|,"30"},{:|35|,"35"}} )

	rowcol_06 << rowcol.new(rowcol_01,1,3,:pixel,
		:resize?,	_true,
		:tab_label,	"Map Animator",
		:bottom_spacing,	0,
		:col,	1,
		:col_spacing,	7,
		:col_alignment,	:centre,
		:row_alignment,	:fill,
		:left_spacing,	0,
		:right_spacing,	0,
		:row,	3,
		:row_spacing,	6,
		:top_spacing,	0)

	# Animate the current map
	_self.action(:play_image_button_item).place_control_on(rowcol_06,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	1,
			:col_alignment,	:left,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|play_image_button_item_selected()| } )

	# Pauses the current animation
	_self.action(:pause_image_button_item).place_control_on(rowcol_06,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	2,
			:col_alignment,	:left,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|pause_image_button_item_selected()| } )

	# Resets any cached animation frames
	_self.action(:reset_button_item).place_control_on(rowcol_06,:dialog,
		:has_border?, _false,
		:control_type, { :image_button_item,
			:col,	3,
			:col_alignment,	:left,
			:row,	1,
			:row_alignment,	:top,
			:selector,	:|reset_button_item_selected()| } )

	>> rowcol_01
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.quit()
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010
	##
	##  Close the dialog.
	##
	.framework.close()
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.dd_default_method(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010
	##
	##  General default method writing CLASS.METHOD and passed ARGS to
	##  the Magik> prompt.

	msg << write_string("Auto-generated : ",args[1],%newline)

	_if args.size > 1
	_then
		msg +<< write_string(%newline,args.size-1," parameter(s) passed:")
 	_endif

	_for i _over 2.upto(args.size)
	_loop
		msg +<< write_string(%newline,"         ",args[i])
	_endloop

	write(%newline,"-"*80,%newline,msg)
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.frames_text_choice_item_selected(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010

	_self.dd_default_method("map_animator.frames_text_choice_item_selected()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.interval_text_choice_item_selected(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010

	_self.dd_default_method("map_animator.interval_text_choice_item_selected()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.pause_image_button_item_selected(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010

	_self.dd_default_method("map_animator.pause_image_button_item_selected()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.play_image_button_item_selected(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010

	_self.dd_default_method("map_animator.play_image_button_item_selected()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.reset_button_item_selected(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010

	_self.dd_default_method("map_animator.reset_button_item_selected()",_scatter args)
_endmethod
$

_pragma(classify_level=restricted, topic={map_animator})
_method map_animator.slider_item_changed(_gather args)
	##
	##  Auto-generated by Dialog Designer v2.1 : 27/08/2010

	_self.dd_default_method("map_animator.slider_item_changed()",_scatter args)
_endmethod
$
